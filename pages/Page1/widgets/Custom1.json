{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 73,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "sc4r6odydc",
  "leftColumn": 11,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 91,
  "mobileLeftColumn": 11,
  "mobileRightColumn": 34,
  "mobileTopRow": 61,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 16.921875,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 43,
  "srcDoc": {
    "css": ".abilities-grid-root {\n  width: 100%;\n  padding: 18px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  min-height: 62px;\n  background: #fcfcfc;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  overflow-x: auto;\n  box-sizing: border-box;\n}\n\n.ability-img-box {\n  margin-right: 12px;\n  padding: 5px;\n  background: #f1f0fe;\n  border: 1.3px solid var(--appsmith-theme-primaryColor, #6623ed);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n  width: 48px;\n  transition: box-shadow .2s;background 0.2s;\n}\n\n.ability-img-box:last-child {\n  margin-right: 0;\n}\n\n.ability-img {\n  max-width: 36px;\n  max-height: 36px;\n  object-fit: contain;\n  border-radius: 6px;\n  display: block;\n  background: #fff;\n}\n\n.grid-placeholder {\n  color: #bbb;\n  font-size: 16px;\n  padding: 10px 0;\n  font-style: italic;\n}\n",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// expects appsmith.model.selectedAbilities = [ { image: <string>, name: <string> }, ... ]\nconst mockAbilities = [{\n  image: \"https://img.icons8.com/emoji/48/bolt-emoji.png\",\n  name: \"Lightning\"\n}, {\n  image: \"https://img.icons8.com/emoji/48/fire.png\",\n  name: \"Fire\"\n}, {\n  image: \"https://img.icons8.com/emoji/48/water-wave.png\",\n  name: \"Water\"\n}, {\n  image: \"https://img.icons8.com/emoji/48/globe-showing-americas.png\",\n  name: \"Earth\"\n}];\nfunction AbilitiesGrid() {\n  // Uses the selectedAbilities from appsmith.model, falls back to mock data for preview\n  const [selectedAbilities, setSelectedAbilities] = React.useState(appsmith.model.selectedAbilities?.length ? appsmith.model.selectedAbilities : []);\n\n  // Listen for changes via appsmith.onModelChange\n  React.useEffect(() => {\n    appsmith.onModelChange((model, prevModel) => {\n      if (JSON.stringify(model.selectedAbilities) !== JSON.stringify(prevModel?.selectedAbilities)) {\n        setSelectedAbilities(model.selectedAbilities || []);\n      }\n    });\n  }, []);\n\n  // For preview/demo mode (if empty)\n  const isEmpty = !selectedAbilities || selectedAbilities.length === 0;\n  const gridContent = isEmpty ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-placeholder\"\n  }, \"No abilities selected yet.\") : selectedAbilities.map((ability, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ability-img-box\",\n    key: ability?.name || idx,\n    title: ability?.name || \"Ability\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"ability-img\",\n    src: ability.image || mockAbilities[idx % mockAbilities.length].image,\n    alt: ability?.name || `Ability ${idx + 1}`\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"abilities-grid-root\"\n  }, gridContent);\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(AbilitiesGrid, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 61,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".abilities-grid-root {\n  width: 100%;\n  padding: 18px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  min-height: 62px;\n  background: #fcfcfc;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  overflow-x: auto;\n  box-sizing: border-box;\n}\n\n.ability-img-box {\n  margin-right: 12px;\n  padding: 5px;\n  background: #f1f0fe;\n  border: 1.3px solid var(--appsmith-theme-primaryColor, #6623ed);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n  width: 48px;\n  transition: box-shadow .2s;background 0.2s;\n}\n\n.ability-img-box:last-child {\n  margin-right: 0;\n}\n\n.ability-img {\n  max-width: 36px;\n  max-height: 36px;\n  object-fit: contain;\n  border-radius: 6px;\n  display: block;\n  background: #fff;\n}\n\n.grid-placeholder {\n  color: #bbb;\n  font-size: 16px;\n  padding: 10px 0;\n  font-style: italic;\n}\n",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// expects appsmith.model.selectedAbilities = [ { image: <string>, name: <string> }, ... ]\nconst mockAbilities = [\n  {\n    image: \"https://img.icons8.com/emoji/48/bolt-emoji.png\",\n    name: \"Lightning\"\n  },\n  {\n    image: \"https://img.icons8.com/emoji/48/fire.png\",\n    name: \"Fire\"\n  },\n  {\n    image: \"https://img.icons8.com/emoji/48/water-wave.png\",\n    name: \"Water\"\n  },\n  {\n    image: \"https://img.icons8.com/emoji/48/globe-showing-americas.png\",\n    name: \"Earth\"\n  },\n];\n\nfunction AbilitiesGrid() {\n  // Uses the selectedAbilities from appsmith.model, falls back to mock data for preview\n  const [selectedAbilities, setSelectedAbilities] = React.useState(appsmith.model.selectedAbilities?.length\n    ? appsmith.model.selectedAbilities\n    : []);\n\n  // Listen for changes via appsmith.onModelChange\n  React.useEffect(() => {\n    appsmith.onModelChange((model, prevModel) => {\n      if (JSON.stringify(model.selectedAbilities) !== JSON.stringify(prevModel?.selectedAbilities)) {\n        setSelectedAbilities(model.selectedAbilities || []);\n      }\n    });\n  }, []);\n\n  // For preview/demo mode (if empty)\n  const isEmpty = !selectedAbilities || selectedAbilities.length === 0;\n  const gridContent = isEmpty\n    ? <div className=\"grid-placeholder\">No abilities selected yet.</div>\n    : selectedAbilities.map((ability, idx) => (\n        <div className=\"ability-img-box\" key={ability?.name || idx} title={ability?.name || \"Ability\"}>\n          <img className=\"ability-img\" src={ability.image || mockAbilities[idx % mockAbilities.length].image} alt={ability?.name || `Ability ${idx+1}`} />\n        </div>\n      ));\n\n  return (\n    <div className=\"abilities-grid-root\">\n      {gridContent}\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<AbilitiesGrid />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "7ppk9i47x4",
  "widgetName": "Custom1"
}